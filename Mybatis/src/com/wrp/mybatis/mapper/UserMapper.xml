<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- namespace命名空间，作用是对sql进行分类管理 ,理解sql隔离
注意：使用mapper代理方法开发，namespace有特殊重要的作用
-->
<mapper namespace="com.wrp.mybatis.mapper.UserMapper">
	<!-- 开启  本Mapper的命名空间com.wrp.mybatis.mapper.UserMapper下的二级缓存
	type:指定cache接口的实现类的类型，mybatis默认使用PerpetualCache
	要和ehcache整合，需要配置type为ehcache实现cache接口的类型。
	-->
	<cache type="org.mybatis.caches.ehcache.EhcacheCache"/>
	
	<!-- 定义sql片段 -->
	<sql id="query_user_where">
		<if test="userCustom!=null">
			<if test="userCustom.sex!=null and userCustom.sex!='' ">
				and user.sex=#{userCustom.sex}
			</if>
			<if test="userCustom.username!=null and userCustom.username!='' ">
				and user.username LIKE '%${userCustom.username}%'
			</if>
		</if>
		<if test="ids!=null">
			<!-- 使用foreach遍历传入ids 
			collection:指定输入的对象中集合属性；item：每个遍历产生的对象； open：开始遍历时接的串；close：结束遍历时接的串；separator：遍历的两个对象之间需拼接的串。
			-->
			<!-- 以实现如下的拼接sql实例为例      AND(id=16 OR id=22 OR id=25) -->
			<foreach collection="ids" item="user_id" open="AND(" close=")" separator="OR">
				id=#{user_id}
			</foreach>
			
			<!-- 以实现如下的拼接sql实例为例      AND id IN(16,22,25) -->
			<foreach collection="ids" item="user_id" open="AND id IN(" close=")" separator=",">
				#{user_id}
			</foreach>
		</if>
	</sql>

	<!-- 定义resultMap 
	将 和User类中的属性作为一个映射关系。
	type:resultMap最终映射的java对象类型，可以使用别名
	id ： 对resultMap的唯一标识
	-->
	<resultMap type="user" id="userResultMap">
		<!-- id表示查询结果集中唯一标识列的定义
		column：查询出来的列名，property：type指定的pojo类型的属性名。resultMap最终将column和property作为一个映射关系（对应关系）
		-->
		<id column="id_" property="id"/>
		<!-- result:对普通映射定义 
		column：查询出来的列名，property：type指定的pojo类型的属性名。resultMap最终将column和property作为一个映射关系（对应关系）
		-->
		<result column="username_" property="username"/>
	</resultMap>

	<!-- 用户信息综合查询 
	#{userCustom.sex}:取出pojo包装对象中性别的值。
	${userCustom.username}：取出pojo包装对象中用户姓名的值
	-->
	<select id="findUserList" parameterType="com.wrp.mybatis.po.UserQueryVo" resultType="com.wrp.mybatis.po.UserCustom">
		SELECT * FROM user 
		<!-- 动态SQL： where可以自动的去掉第一个and ,  此处使用SQL片段-->
		<where>
			<!-- 引用sql片段的id，如果refid指定的id不存在该mapper文件中，需要加namespace -->
			<include refid="query_user_where"></include>
			<!-- 这里还要引用其他的sql片段 -->
		</where>
	</select>
	
	<!-- 用户信息综合查询 总数  -->
	<select id="findUserCount" parameterType="com.wrp.mybatis.po.UserQueryVo" resultType="int">
		SELECT count(*) FROM user
		<!-- 动态SQL： where可以自动的去掉第一个and -->
		<where>
			<if test="userCustom!=null">
				<if test="userCustom.sex!=null and userCustom.sex!='' ">
					and user.sex=#{userCustom.sex}
				</if>
				<if test="userCustom.username!=null and userCustom.username!='' ">
					and user.username LIKE '%${userCustom.username}%'
				</if>
			</if>
		</where>
	</select>
	
	<!-- 在映射文件中配置sql语句 -->
	<!-- 通过select执行数据库查询，其中id：标识映射文件的sql，称为statement的id，将sql语句封装到mappedstatement对象-->
	<!-- 需求：通过id查询用户表的记录 
	parameterType:指定输入参数的类型，这里指定为int型
	#{}表示一个占位符，#{id}：其中的id表示输入的参数，参数名为id，如果输入参数是简单类型，#{}中的参数名可以任意，可以为value或者其他名称.
	
	resultType:指定sql输出结果的所映射的java对象类型，select指定resultType表示将单条记录映射成java对象。
	-->
	<select id="findUserById" parameterType="int" resultType="user">
		SELECT * FROM user WHERE id=#{value}
	</select>

	<!-- 使用resultMap进行输出映射 
	resultMap：指定定义的resultMap的id,如果这个resultMap在其他的mapper文件 则需要在其前面加上namespace
	-->
	<select id="findUserByIdResultMap" parameterType="int" resultMap="userResultMap">
		SELECT id id_, username username_ FROM user WHERE id=#{value}
	</select>
	<!-- 根据用户名称模糊查询用户信息,可能返回多条信息
	resultType:指定就是单条记录映射的Java对象类型
	%${ }表示拼接sql串，将接受到的参数不加修饰地拼接到sql中，使用%${ }可能导致sql注入！！
	${value}：接收输入的内容，如果输入参数是简单类型，${}只能使用value！
	-->
	<select id="findUserByName" parameterType="java.lang.String" resultType="com.wrp.mybatis.po.User">
		SELECT * FROM user WHERE username LIKE '%${value}%'
	</select>
	
	<!-- 添加用户 
	parameterType:指定的参数类型是pojo类型
	#{}中指定pojo的属性名，接收到的pojo对象的属性值，Mybatis也是通过OGNL获取对象的属性值
	id自增可以不写到插入语句
	-->
	<insert id="insertUser" parameterType="com.wrp.mybatis.po.User" >
		<!-- 返回插入数据的主键到user对象中 
		SELECT LAST_INSERT_ID():得到刚插入数据库的记录的主键值，只适用于自增主键
		keyProperty：指的是将查询得到的主键值设置到parameterType指定的对象的哪个属性
		order：ELECT LAST_INSERT_ID()相对于Insert语句的执行顺序
		resultType:指定SELECT LAST_INSERT_ID()执行结果的类型
		-->
		<selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
			SELECT LAST_INSERT_ID()
		</selectKey>
		INSERT INTO user(username,birthday,sex,address) VALUE(#{username},#{birthday},#{sex},#{address})
		
		<!-- 使用mysql的uuid()函数生成主键
		执行过程：首先通过uuid()得到主键，将主键设置到user对象的id属性中
		其次在insert执行时，从user对象中国取出id属性值
		 -->
		<!-- <selectKey keyProperty="id" order="BEFORE" resultType="java.lang.String">
			SELECT UUID()
		</selectKey>
		INSERT INTO user(id,username,birthday,sex,address) VALUE(#{id},#{username},#{birthday},#{sex},#{address}) -->
	</insert>
	
	<!-- 删除用户 
	根据id删除用户，需要输入id值
	-->
	<delete id="deleteUser" parameterType="java.lang.Integer">
		DELETE FROM USER WHERE id=#{value}
	</delete>
	<!-- 根据id更新用户 
	需要传入用户的id
	需要传入用户的更新信息，parameterType指定user对象，包含用户id和更新信息，注意：id必须存在
	-->
	<update id="updateUser" parameterType="com.wrp.mybatis.po.User">
		UPDATE user SET username=#{username},birthday=#{birthday},sex=#{sex},address=#{address} WHERE id=#{id}
	</update>
</mapper>